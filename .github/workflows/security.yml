name: Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Ejecutar cada lunes a las 2 AM

# ✅ PERMISOS GLOBALES NECESARIOS
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    # ✅ PERMISOS ESPECÍFICOS PARA ESTE JOB
    permissions:
      actions: read
      contents: read
      security-events: write
      checks: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        source-root: .
        debug: false

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        wait-for-processing: true

  dependency-check:
    runs-on: ubuntu-latest
    
    # ✅ PERMISOS PARA DEPENDENCY CHECK
    permissions:
      contents: read
      security-events: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontend-plataforma/node_modules
          backend/*/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      working-directory: ./frontend-plataforma
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run dependency check for frontend
      working-directory: ./frontend-plataforma
      run: |
        echo "🔍 Checking frontend dependencies..."
        npm audit --audit-level moderate || echo "⚠️ Frontend audit completed with warnings"

    - name: Install backend dependencies and audit
      run: |
        echo "🔍 Checking backend dependencies..."
        services=("usuarios" "prestamos" "pagos")
        
        for service in "${services[@]}"; do
          if [ -d "backend/$service" ] && [ -f "backend/$service/package.json" ]; then
            echo "🔍 Installing and auditing $service service..."
            cd "backend/$service"
            
            # Instalar dependencias
            if [ -f package-lock.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            
            # Ejecutar audit
            npm audit --audit-level moderate || echo "⚠️ $service audit completed with warnings"
            cd - > /dev/null
          else
            echo "⚠️ Skipping $service - directory or package.json not found"
          fi
        done

    - name: Check for known vulnerabilities
      run: |
        echo "🔍 Checking for known vulnerabilities..."
        
        # Verificar versiones de Node.js y npm
        echo "📦 Node.js version: $(node --version)"
        echo "📦 npm version: $(npm --version)"
        
        # Buscar dependencias desactualizadas
        echo "🔍 Checking for outdated packages..."
        npm outdated || echo "✅ All packages are up to date"

  secret-scan:
    runs-on: ubuntu-latest
    
    # ✅ PERMISOS PARA SECRET SCANNING
    permissions:
      contents: read
      security-events: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run secret scanning
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # Crear directorio para resultados
        mkdir -p security-results
        
        # Buscar patrones de secrets en el código
        echo "📝 Checking for hardcoded secrets..."
        
        # Buscar passwords
        echo "🔍 Checking for hardcoded passwords..."
        if grep -r -n -i "password\s*[=:]\s*['\"][^'\"]*['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | grep -v test | grep -v ".git" | grep -v coverage | head -10; then
          echo "⚠️ Potential hardcoded passwords found" | tee security-results/passwords.txt
        else
          echo "✅ No hardcoded passwords detected"
        fi
        
        # Buscar API keys
        echo "🔍 Checking for API keys..."
        if grep -r -n -i -E "(api_key|apikey|api-key)\s*[=:]\s*['\"][^'\"]*['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | grep -v test | grep -v ".git" | grep -v coverage | head -10; then
          echo "⚠️ Potential API keys found" | tee security-results/api-keys.txt
        else
          echo "✅ No hardcoded API keys detected"
        fi
        
        # Buscar tokens JWT o de acceso
        echo "🔍 Checking for access tokens..."
        if grep -r -n -i -E "(token|jwt|bearer)\s*[=:]\s*['\"][^'\"]{20,}['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | grep -v test | grep -v ".git" | grep -v coverage | head -10; then
          echo "⚠️ Potential tokens found" | tee security-results/tokens.txt
        else
          echo "✅ No hardcoded tokens detected"
        fi
        
        # Buscar URLs de bases de datos
        echo "🔍 Checking for database URLs..."
        if grep -r -n -i -E "(DATABASE_URL|DB_URL|POSTGRES_URL)\s*[=:]\s*['\"][^'\"]*['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | grep -v test | grep -v ".git" | grep -v coverage | head -10; then
          echo "⚠️ Potential database URLs found" | tee security-results/db-urls.txt
        else
          echo "✅ No hardcoded database URLs detected"
        fi
        
        echo "✅ Secret scan completed"

    - name: Check environment variables usage
      run: |
        echo "🔍 Checking environment variables usage..."
        
        # Verificar que se usen variables de entorno en lugar de hardcoding
        ENV_USAGE=$(grep -r "process.env" --include="*.js" --include="*.ts" . | grep -v node_modules | wc -l)
        if [ "$ENV_USAGE" -gt 0 ]; then
          echo "✅ Environment variables are being used properly ($ENV_USAGE occurrences)"
          echo "📋 Most common environment variables:"
          grep -r -o "process\.env\.[A-Z_][A-Z0-9_]*" --include="*.js" --include="*.ts" . | grep -v node_modules | sort | uniq -c | sort -nr | head -10
        else
          echo "⚠️ Consider using more environment variables for configuration"
        fi

    - name: Scan for security anti-patterns
      run: |
        echo "🔍 Scanning for security anti-patterns..."
        
        # Buscar eval() usage
        if grep -r -n "eval(" --include="*.js" --include="*.ts" . | grep -v node_modules | grep -v test; then
          echo "⚠️ eval() usage found - potential security risk"
        else
          echo "✅ No eval() usage detected"
        fi
        
        # Buscar innerHTML assignments
        if grep -r -n "innerHTML\s*=" --include="*.js" --include="*.ts" --include="*.tsx" . | grep -v node_modules | grep -v test; then
          echo "⚠️ innerHTML assignments found - potential XSS risk"
        else
          echo "✅ No risky innerHTML assignments detected"
        fi
        
        # Buscar SQL concatenation
        if grep -r -n -i "select.*+.*from\|insert.*+.*into\|update.*+.*set\|delete.*+.*from" --include="*.js" --include="*.ts" . | grep -v node_modules | grep -v test; then
          echo "⚠️ Potential SQL injection vulnerability found"
        else
          echo "✅ No obvious SQL injection patterns detected"
        fi

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: security-results/
        retention-days: 30

  license-check:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install license checker
      run: npm install -g license-checker

    - name: Check licenses
      run: |
        echo "📋 Checking licenses for compliance..."
        
        # Frontend licenses
        if [ -d "frontend-plataforma" ] && [ -f "frontend-plataforma/package.json" ]; then
          echo "🔍 Frontend licenses:"
          cd frontend-plataforma
          if [ -f package-lock.json ]; then
            npm ci || npm install
          else
            npm install
          fi
          license-checker --summary || echo "⚠️ License check completed with warnings"
          cd ..
        fi
        
        # Backend licenses
        services=("usuarios" "prestamos" "pagos")
        for service in "${services[@]}"; do
          if [ -d "backend/$service" ] && [ -f "backend/$service/package.json" ]; then
            echo "🔍 $service service licenses:"
            cd "backend/$service"
            if [ -f package-lock.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            license-checker --summary || echo "⚠️ License check completed with warnings"
            cd - > /dev/null
          fi
        done

  notify-security-completion:
    needs: [codeql, dependency-check, secret-scan, license-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "🛡️ Security Scan Summary"
        echo "======================="
        echo "CodeQL Analysis: ${{ needs.codeql.result }}"
        echo "Dependency Check: ${{ needs.dependency-check.result }}"
        echo "Secret Scanning: ${{ needs.secret-scan.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${GITHUB_REF#refs/heads/}"
        echo "Commit: ${{ github.sha }}"
        echo "Run ID: ${{ github.run_id }}"
        
        # Calcular estado general
        FAILED_SCANS=""
        
        if [[ "${{ needs.codeql.result }}" != "success" ]]; then
          FAILED_SCANS="$FAILED_SCANS CodeQL"
        fi
        
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          FAILED_SCANS="$FAILED_SCANS Dependencies"
        fi
        
        if [[ "${{ needs.secret-scan.result }}" != "success" ]]; then
          FAILED_SCANS="$FAILED_SCANS Secrets"
        fi
        
        if [[ "${{ needs.license-check.result }}" != "success" ]]; then
          FAILED_SCANS="$FAILED_SCANS Licenses"
        fi
        
        if [[ -z "$FAILED_SCANS" ]]; then
          echo "✅ All security scans passed successfully!"
          echo "🎉 Security posture is good"
        else
          echo "⚠️ Some security scans had issues: $FAILED_SCANS"
          echo "📋 Please review the logs for details"
        fi
        
        # Generar reporte de seguridad
        echo "📊 Security Report" > security-report.md
        echo "=================" >> security-report.md
        echo "" >> security-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-report.md
        echo "**Branch:** ${GITHUB_REF#refs/heads/}" >> security-report.md
        echo "**Commit:** ${{ github.sha }}" >> security-report.md
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
        echo "" >> security-report.md
        echo "## Results" >> security-report.md
        echo "- **CodeQL Analysis:** ${{ needs.codeql.result }}" >> security-report.md
        echo "- **Dependency Check:** ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- **Secret Scanning:** ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- **License Check:** ${{ needs.license-check.result }}" >> security-report.md

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90